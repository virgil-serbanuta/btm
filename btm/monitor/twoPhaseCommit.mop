package mop;

import java.io.*;
import java.util.*;
import javax.transaction.RollbackException;
import javax.transaction.Status;
import javax.transaction.Transaction;
import javax.transaction.xa.XAException;
import javax.transaction.xa.XAResource;

import bitronix.tm.twopc.Committer;
import bitronix.tm.twopc.Preparer;
import bitronix.tm.twopc.Rollbacker;
import bitronix.tm.twopc.XAResourceWrapper;

twoPhaseCommit(Transaction tx) {

    Set<XAResource> participants = new HashSet<XAResource>();
    Set<XAResource> prepared = new HashSet<XAResource>();
    Set<XAResource> rolledback = new HashSet<XAResource>();
    Set<XAResource> committed = new HashSet<XAResource>();
    // https://docs.oracle.com/javaee/5/api/javax/transaction/Status.html
    int state = Status.STATUS_NO_TRANSACTION;
    Transaction transaction;

    event addResource after (Transaction tx, XAResource xa):
        execution(* Transaction.enlistResource(XAResource))
        && target(tx)
        && args(xa) {
        participants.add(xa);
        System.out.println("add resource");
    }

    event startTx before (Transaction tx):
        execution(* Transaction.commit())
        && target(tx) {
        if (state == Status.STATUS_NO_TRANSACTION) {
            transaction = tx;
            state = Status.STATUS_ACTIVE;
            try {
                System.out.println(String.format("start transaction. " +
                                                 "transaction state: %d, monitor state: %d", transaction.getStatus(), state));
            } catch (Exception e) {}
        } else {
            System.out.println("violation!");
        }
    }

    event xaPrepareSuccess after (Transaction tx, XAResourceWrapper xar) returning (int result):
        execution(* XAResourceWrapper.prepare(Transaction+, ..))
        && target(xar)
        && args(tx, ..) {
            if (state == Status.STATUS_ACTIVE || state == Status.STATUS_PREPARING) {
                prepared.add(xar.getXAResource());
                state = Status.STATUS_PREPARING;
                try {
                    System.out.println(String.format("participant prepared. " +
                                                     "transaction state: %d, monitor state: %d", transaction.getStatus(), state));
                } catch (Exception e) {}
                if(prepared.size() == participants.size()) {
                    state = Status.STATUS_PREPARED;
                    System.out.println("all participants prepared.");
                }
            } else {
                System.out.println("violation!");
            }
    }

    event xaPrepareFailure after (Transaction tx) throwing (XAException e):
        execution(* XAResourceWrapper.prepare(Transaction+, ..))
        && args(tx, ..) {
            if (state == Status.STATUS_ACTIVE || state == Status.STATUS_PREPARING) {
                System.out.println("participant prepare failed.");
            } else {
                System.out.println("violation!");
            }
    }

    // Implementation specific event
    event prepareEndReturn after (Transaction tx) returning (Object o):
        execution(* Preparer.prepare(Transaction+, ..))
        && args(tx, ..) {
            try {
                System.out.println(String.format("end of prepare phase: success. " +
                                                  "transaction state: %d, monitor state: %d", transaction.getStatus(), state));
            } catch (Exception e) {}
    }

    // Implementation specific event
    event prepareEndException after (Transaction tx) throwing (RollbackException re):
        execution(* Preparer.prepare(Transaction+, ..))
        && args(tx, ..) {
            if (state == Status.STATUS_ACTIVE || state == Status.STATUS_PREPARING) {
                state = Status.STATUS_MARKED_ROLLBACK;
                try {
                    System.out.println(String.format("end of prepare phase: failure. " +
                                                     "transaction state: %d, monitor state: %d", transaction.getStatus(), state));
                } catch (Exception e) {}
            } else {
                System.out.println("violation!");
            }
    }


    event xaRollbackSuccess after (Transaction tx, XAResourceWrapper xar) :
        execution(* XAResourceWrapper.rollback(Transaction+, ..))
        && target(xar)
        && args(tx, ..) {
            if (state == Status.STATUS_MARKED_ROLLBACK || state == Status.STATUS_ROLLING_BACK) {
                rolledback.add(xar.getXAResource());
                state = Status.STATUS_ROLLING_BACK;
                try {
                    System.out.println(String.format("participant rolledback. " +
                                                     "transaction state: %d, monitor state: %d", transaction.getStatus(), state));
                } catch (Exception e) {}
                if(rolledback.size() == participants.size()) {
                    state = Status.STATUS_ROLLEDBACK;
                    System.out.println("all participants rolledback.");
                }
            }
    }


    // Implementation specific event
    event rollbackEnd after (Transaction tx):
        execution(* Rollbacker.rollback(Transaction+, ..)) 
        && args(tx, ..) {
            try {
                System.out.println(String.format("end of rollback phase. " +
                                                  "transaction state: %d, monitor state: %d", transaction.getStatus(), state));
            } catch (Exception e) {}
    }


    event xaCommitSuccess after (Transaction tx, XAResourceWrapper xar) :
        execution(* XAResourceWrapper.commit(Transaction+, ..))
        && target(xar)
        && args(tx, ..) {
            if (state == Status.STATUS_PREPARED || state == Status.STATUS_COMMITTING) {
                committed.add(xar.getXAResource());
                state = Status.STATUS_COMMITTING;
                try {
                    System.out.println(String.format("participant committed. " +
                                                     "transaction state: %d, monitor state: %d", transaction.getStatus(), state));
                } catch (Exception e) {}
                if(committed.size() == participants.size()) {
                    state = Status.STATUS_COMMITTED;
                    System.out.println("all participants committed.");
                }
            } else {
                System.out.println("violation!");
            }
    }

    // Implementation specific event
    event commitEnd after (Transaction tx):
        execution(* Committer.commit(Transaction+, ..))
        && args(tx, ..) {
            try {
                System.out.println(String.format("end of commit phase. " +
                                                  "transaction state: %d, monitor state: %d", transaction.getStatus(), state));
            } catch (Exception e) {}
    }


    event endTx after (Transaction tx):
         execution(* Transaction.commit())
         && target(tx) {
             if (state == Status.STATUS_ROLLEDBACK || state == Status.STATUS_COMMITTED) {
                 try {
                     System.out.println(String.format("end of transaction. " +
                                                      "transaction state: %d, monitor state: %d", transaction.getStatus(), state));
                 } catch (Exception e) {}
             } else {
                 System.out.println("violation!");
             }
    }


}
